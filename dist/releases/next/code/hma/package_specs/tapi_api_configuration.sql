-- liquibase formatted sql
-- changeset HMA:f9397429fab15bfe631b57b6fa1eca62a1209ccf stripComments:false logicalFilePath:package_specs\tapi_api_configuration.sql
-- sqlcl_snapshot src/database/hma/package_specs/tapi_api_configuration.pks:null:f9397429fab15bfe631b57b6fa1eca62a1209ccf:create

create or replace package hma.tapi_api_configuration is
    /**
    * TAPI_API_CONFIGURATION
    * Generated by: tapiGen2 - DO NOT MODIFY!
    * Website: github.com/osalvador/tapiGen2
    * Created On: 2024-10-12
    */

    --Scalar/Column types
    subtype hash_t is varchar2(40);
    subtype config_name is api_configuration.config_name%type;
    subtype config_value is api_configuration.config_value%type;

    --Record type
    type api_configuration_rt is record (
            config_name  api_configuration.config_name%type,
            config_value api_configuration.config_value%type,
            hash         hash_t,
            row_id       varchar2(64)
    );
    --Collection types (record)
    type api_configuration_tt is
        table of api_configuration_rt;

    --Global exceptions
    e_ol_check_failed exception; --Optimistic lock check failed
    e_row_missing exception; --The cursor failed to get a row
    e_upd_failed exception; --The update operation failed
    e_del_failed exception; --The delete operation failed

    /**
    * Generates a SHA1 hash for optimistic locking purposes.
    *
    * @param    p_config_name        must be NOT NULL
    */
    function hash (
        p_config_name in api_configuration.config_name%type
    ) return varchar2;

    /**
    * This function generates a SHA1 hash for optimistic locking purposes.
    * Access directly to the row by rowid
    *
    * @param  p_rowid  must be NOT NULL
    */
    function hash_rowid (
        p_rowid in varchar2
    ) return varchar2;

    /**
    * This is a table encapsulation function designed to retrieve information from the api_configuration table.
    *
    * @param      p_config_name      must be NOT NULL
    * @return     api_configuration Record Type
    */
    function rt (
        p_config_name in api_configuration.config_name%type
    ) return api_configuration_rt
        result_cache;

    /**
    * This is a table encapsulation function designed to retrieve information
    * from the api_configuration table while placing a lock on it for a potential
    * update/delete. Do not use this for updates in web based apps, instead use the
    * rt_for_web_update function to get a FOR_WEB_UPDATE_RT record which
    * includes all of the tables columns along with an md5 checksum for use in the
    * web_upd and web_del procedures.
    *
    * @param      p_config_name      must be NOT NULL
    * @return     api_configuration Record Type
    */
    function rt_for_update (
        p_config_name in api_configuration.config_name%type
    ) return api_configuration_rt
        result_cache;

    /**
    * This is a table encapsulation function designed to retrieve information from the api_configuration table.
    * This function return Record Table as PIPELINED Function
    *
    * @param      p_config_name      must be NOT NULL
    * @return     api_configuration Table Record Type
    */
    function tt (
        p_config_name in api_configuration.config_name%type default null
    ) return api_configuration_tt
        pipelined;

    /**
    * This is a table encapsulation function designed to insert a row into the api_configuration table.
    *
    * @param      p_api_configuration_rec       Record Type
    * @return     p_api_configuration_rec       Record Type
    */
    procedure ins (
        p_api_configuration_rec in out api_configuration_rt
    );

    /**
    * This is a table encapsulation function designed to update a row in the api_configuration table.
    *
    * @param      p_api_configuration_rec      Record Type
    * @param      p_ignore_nulls      IF TRUE then null values are ignored in the update
    */
    procedure upd (
        p_api_configuration_rec in api_configuration_rt,
        p_ignore_nulls          in boolean := false
    );

    /**
    * This is a table encapsulation function designed to update a row in the api_configuration table,
    * access directly to the row by rowid
    *
    * @param      p_api_configuration_rec      Record Type
    * @param      p_ignore_nulls      IF TRUE then null values are ignored in the update
    */
    procedure upd_rowid (
        p_api_configuration_rec in api_configuration_rt,
        p_ignore_nulls          in boolean := false
    );

    /**
    * This is a table encapsulation function designed to update a row
    * in the api_configuration table whith optimistic lock validation
    *
    * @param      p_api_configuration_rec      Record Type
    * @param      p_ignore_nulls      IF TRUE then null values are ignored in the update
    */
    procedure web_upd (
        p_api_configuration_rec in api_configuration_rt,
        p_ignore_nulls          in boolean := false
    );

    /**
    * This is a table encapsulation function designed to update a row
    * in the api_configuration table whith optimistic lock validation
    * access directly to the row by rowid
    *
    * @param      p_api_configuration_rec      Record Type
    * @param      p_ignore_nulls      IF TRUE then null values are ignored in the update
    */
    procedure web_upd_rowid (
        p_api_configuration_rec in api_configuration_rt,
        p_ignore_nulls          in boolean := false
    );

    /**
    * This is a table encapsulation function designed to delete a row from the api_configuration table.
    *
    * @param    p_config_name        must be NOT NULL
    */
    procedure del (
        p_config_name in api_configuration.config_name%type
    );

    /**
    * This is a table encapsulation function designed to delete a row from the api_configuration table
    * access directly to the row by rowid
    *
    * @param      p_rowid      must be NOT NULL
    */
    procedure del_rowid (
        p_rowid in varchar2
    );

    /**
    * This is a table encapsulation function designed to delete a row from the api_configuration table
    * whith optimistic lock validation
    *
    * @param      p_config_name      must be NOT NULL
    * @param      p_hash       must be NOT NULL
    */
    procedure web_del (
        p_config_name in api_configuration.config_name%type,
        p_hash        in varchar2
    );

    /**
    * This is a table encapsulation function designed to delete a row from the api_configuration table
    * whith optimistic lock validation, access directly to the row by rowid
    *
    * @param      p_rowid      must be NOT NULL
    * @param      p_hash       must be NOT NULL
    */
    procedure web_del_rowid (
        p_rowid in varchar2,
        p_hash  in varchar2
    );

end tapi_api_configuration;
/