-- liquibase formatted sql
-- changeset HMA:4ace3adccf108c3b8b49b1bc3c11bd195983137b stripComments:false logicalFilePath:package_specs\tapi_app_settings.sql
-- sqlcl_snapshot src/database/hma/package_specs/tapi_app_settings.pks:null:4ace3adccf108c3b8b49b1bc3c11bd195983137b:create

create or replace package hma.tapi_app_settings is
   /**
   * TAPI_APP_SETTINGS
   * Generated by: tapiGen2 - DO NOT MODIFY!
   * Website: github.com/osalvador/tapiGen2
   * Created On: 2024-10-13
   */

   --Scalar/Column types
    subtype hash_t is varchar2(40);
    subtype setting_name is app_settings.setting_name%type;
    subtype setting_value is app_settings.setting_value%type;

   --Record type
    type app_settings_rt is record (
            setting_name  app_settings.setting_name%type,
            setting_value app_settings.setting_value%type,
            hash          hash_t,
            row_id        varchar2(64)
    );
   --Collection types (record)
    type app_settings_tt is
        table of app_settings_rt;

   --Global exceptions
    e_ol_check_failed exception; --Optimistic lock check failed
    e_row_missing exception; --The cursor failed to get a row
    e_upd_failed exception; --The update operation failed
    e_del_failed exception; --The delete operation failed

   /**
   * Generates a SHA1 hash for optimistic locking purposes.
   *
   * @param    p_setting_name        must be NOT NULL
   */
    function hash (
        p_setting_name in app_settings.setting_name%type
    ) return varchar2;

   /**
   * This function generates a SHA1 hash for optimistic locking purposes.
   * Access directly to the row by rowid
   *
   * @param  p_rowid  must be NOT NULL
   */
    function hash_rowid (
        p_rowid in varchar2
    ) return varchar2;

   /**
   * This is a table encapsulation function designed to retrieve information from the app_settings table.
   *
   * @param      p_setting_name      must be NOT NULL
   * @return     app_settings Record Type
   */
    function rt (
        p_setting_name in app_settings.setting_name%type
    ) return app_settings_rt
        result_cache;

   /**
   * This is a table encapsulation function designed to retrieve information
   * from the app_settings table while placing a lock on it for a potential
   * update/delete. Do not use this for updates in web based apps, instead use the
   * rt_for_web_update function to get a FOR_WEB_UPDATE_RT record which
   * includes all of the tables columns along with an md5 checksum for use in the
   * web_upd and web_del procedures.
   *
   * @param      p_setting_name      must be NOT NULL
   * @return     app_settings Record Type
   */
    function rt_for_update (
        p_setting_name in app_settings.setting_name%type
    ) return app_settings_rt
        result_cache;

   /**
   * This is a table encapsulation function designed to retrieve information from the app_settings table.
   * This function return Record Table as PIPELINED Function
   *
   * @param      p_setting_name      must be NOT NULL
   * @return     app_settings Table Record Type
   */
    function tt (
        p_setting_name in app_settings.setting_name%type default null
    ) return app_settings_tt
        pipelined;

   /**
   * This is a table encapsulation function designed to insert a row into the app_settings table.
   *
   * @param      p_app_settings_rec       Record Type
   * @return     p_app_settings_rec       Record Type
   */
    procedure ins (
        p_app_settings_rec in out app_settings_rt
    );

   /**
   * This is a table encapsulation function designed to update a row in the app_settings table.
   *
   * @param      p_app_settings_rec      Record Type
   * @param      p_ignore_nulls      IF TRUE then null values are ignored in the update
   */
    procedure upd (
        p_app_settings_rec in app_settings_rt,
        p_ignore_nulls     in boolean := false
    );

   /**
   * This is a table encapsulation function designed to update a row in the app_settings table,
   * access directly to the row by rowid
   *
   * @param      p_app_settings_rec      Record Type
   * @param      p_ignore_nulls      IF TRUE then null values are ignored in the update
   */
    procedure upd_rowid (
        p_app_settings_rec in app_settings_rt,
        p_ignore_nulls     in boolean := false
    );

   /**
   * This is a table encapsulation function designed to update a row
   * in the app_settings table whith optimistic lock validation
   *
   * @param      p_app_settings_rec      Record Type
   * @param      p_ignore_nulls      IF TRUE then null values are ignored in the update
   */
    procedure web_upd (
        p_app_settings_rec in app_settings_rt,
        p_ignore_nulls     in boolean := false
    );

   /**
   * This is a table encapsulation function designed to update a row
   * in the app_settings table whith optimistic lock validation
   * access directly to the row by rowid
   *
   * @param      p_app_settings_rec      Record Type
   * @param      p_ignore_nulls      IF TRUE then null values are ignored in the update
   */
    procedure web_upd_rowid (
        p_app_settings_rec in app_settings_rt,
        p_ignore_nulls     in boolean := false
    );

   /**
   * This is a table encapsulation function designed to delete a row from the app_settings table.
   *
   * @param    p_setting_name        must be NOT NULL
   */
    procedure del (
        p_setting_name in app_settings.setting_name%type
    );

   /**
   * This is a table encapsulation function designed to delete a row from the app_settings table
   * access directly to the row by rowid
   *
   * @param      p_rowid      must be NOT NULL
   */
    procedure del_rowid (
        p_rowid in varchar2
    );

   /**
   * This is a table encapsulation function designed to delete a row from the app_settings table
   * whith optimistic lock validation
   *
   * @param      p_setting_name      must be NOT NULL
   * @param      p_hash       must be NOT NULL
   */
    procedure web_del (
        p_setting_name in app_settings.setting_name%type,
        p_hash         in varchar2
    );

   /**
   * This is a table encapsulation function designed to delete a row from the app_settings table
   * whith optimistic lock validation, access directly to the row by rowid
   *
   * @param      p_rowid      must be NOT NULL
   * @param      p_hash       must be NOT NULL
   */
    procedure web_del_rowid (
        p_rowid in varchar2,
        p_hash  in varchar2
    );

end tapi_app_settings;
/