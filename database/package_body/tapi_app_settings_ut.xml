<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog 
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog" 
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
        xmlns:n0="http://www.oracle.com/xml/ns/dbchangelog-ext" 
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog 
        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-latest.xsd">
 <changeSet id="1" author="pg">
    <n0:createOraclePackageBody 
    objectName="tapi_app_settings_ut" 
    objectType="PACKAGE_BODY" 
    ownerName="HMA"  
    replaceIfExists="true" >
     <n0:source><![CDATA[
create or replace package body tapi_app_settings_ut is

   -- Test for the hash function
   procedure test_hash_function is
      l_hash varchar2(4000);
   begin
      -- Given
      insert into app_settings (
         setting_name,
         setting_value
      ) values (
         'TEST_HASH_FUNCTION',
         'TestValue'
      );

      -- When
      l_hash := tapi_app_settings.hash('TEST_HASH_FUNCTION');

      -- Then
      ut.expect(l_hash).to_be_not_null;
      delete from app_settings
       where setting_name = 'TEST_HASH_FUNCTION';
   end test_hash_function;

   -- Test for the hash_rowid function
   procedure test_hash_rowid_function is
      l_hash  varchar2(4000);
      l_rowid varchar2(18);
   begin
      -- Given
      insert into app_settings (
         setting_name,
         setting_value
      ) values (
         'TEST_HASH_ROWID_FUNCTION',
         'TestValue'
      );

      select rowid
        into l_rowid
        from app_settings
       where setting_name = 'TEST_HASH_ROWID_FUNCTION';

      -- When
      l_hash := tapi_app_settings.hash_rowid(l_rowid);

      -- Then
      ut.expect(l_hash).to_be_not_null;
      delete from app_settings
       where setting_name = 'TEST_HASH_ROWID_FUNCTION';
   end test_hash_rowid_function;

   -- Test for the insert procedure
   procedure test_ins_procedure is
      l_app_settings_rec tapi_app_settings.app_settings_rt;
      l_count            PLS_INTEGER;
   begin
      -- Given
      l_app_settings_rec.setting_name  := 'TEST_INSERT';
      l_app_settings_rec.setting_value := 'TestValue';

      -- When
      tapi_app_settings.ins(l_app_settings_rec);

      -- Then
      select count(*)
        into l_count
        from app_settings
       where setting_name = 'TEST_INSERT';

      ut.expect(l_count).to_equal(1);
      delete from app_settings
       where setting_name = 'TEST_INSERT';
   end test_insert_procedure;

   -- Test for the update procedure
   procedure test_upd_procedure is
      l_app_settings_rec tapi_app_settings.app_settings_rt;
      l_value            varchar2(1000);
   begin
      -- Given
      insert into app_settings (
         setting_name,
         setting_value
      ) values (
         'TEST_UPDATE',
         'OldValue'
      );

      l_app_settings_rec.setting_name  := 'TEST_UPDATE';
      l_app_settings_rec.setting_value := 'NewValue';

      -- When
      tapi_app_settings.upd(l_app_settings_rec);

      -- Then
      select setting_value
        into l_value
        from app_settings
       where setting_name = 'TEST_UPDATE';

      ut.expect(l_value).to_equal('NewValue');
      delete from app_settings
       where setting_name = 'TEST_UPDATE';
   end test_update_procedure;

   -- Test for the delete procedure
   procedure test_del_procedure is
      l_count PLS_INTEGER;
   begin
      -- Given
      insert into app_settings (
         setting_name,
         setting_value
      ) values (
         'TEST_DELETE',
         'TestValue'
      );

      -- When
      tapi_app_settings.del('TEST_DELETE');

      -- Then
      select count(*)
        into l_count
        from app_settings
       where setting_name = 'TEST_DELETE';

      ut.expect(l_count).to_equal(0);
   end test_delete_procedure;

end tapi_app_settings_ut;
  
      ]]></n0:source>
    </n0:createOraclePackageBody>
 </changeSet>
 <changeSet id="2" author="pg">
    <n0:createOraclePackageBody 
    objectName="tapi_app_settings_ut" 
    objectType="PACKAGE_BODY" 
    ownerName="HMA"  
    replaceIfExists="true" >
     <n0:source><![CDATA[
create or replace package body tapi_app_settings_ut is

   -- Test for the hash function
   procedure test_hash_function is
      l_hash varchar2(4000);
   begin
      -- Given
      insert into app_settings (
         setting_name,
         setting_value
      ) values (
         'TEST_HASH_FUNCTION',
         'TestValue'
      );

      -- When
      l_hash := tapi_app_settings.hash('TEST_HASH_FUNCTION');

      -- Then
      ut.expect(l_hash).to_be_not_null;
      delete from app_settings
       where setting_name = 'TEST_HASH_FUNCTION';
   end test_hash_function;

   -- Test for the hash_rowid function
   procedure test_hash_rowid_function is
      l_hash  varchar2(4000);
      l_rowid varchar2(18);
   begin
      -- Given
      insert into app_settings (
         setting_name,
         setting_value
      ) values (
         'TEST_HASH_ROWID_FUNCTION',
         'TestValue'
      );

      select rowid
        into l_rowid
        from app_settings
       where setting_name = 'TEST_HASH_ROWID_FUNCTION';

      -- When
      l_hash := tapi_app_settings.hash_rowid(l_rowid);

      -- Then
      ut.expect(l_hash).to_be_not_null;
      delete from app_settings
       where setting_name = 'TEST_HASH_ROWID_FUNCTION';
   end test_hash_rowid_function;

   -- Test for the insert procedure
   procedure test_ins_procedure is
      l_app_settings_rec tapi_app_settings.app_settings_rt;
      l_count            PLS_INTEGER;
   begin
      -- Given
      l_app_settings_rec.setting_name  := 'TEST_INSERT';
      l_app_settings_rec.setting_value := 'TestValue';

      -- When
      tapi_app_settings.ins(l_app_settings_rec);

      -- Then
      select count(*)
        into l_count
        from app_settings
       where setting_name = 'TEST_INSERT';

      ut.expect(l_count).to_equal(1);
      delete from app_settings
       where setting_name = 'TEST_INSERT';
   end test_ins_procedure;

   -- Test for the update procedure
   procedure test_upd_procedure is
      l_app_settings_rec tapi_app_settings.app_settings_rt;
      l_value            varchar2(1000);
   begin
      -- Given
      insert into app_settings (
         setting_name,
         setting_value
      ) values (
         'TEST_UPDATE',
         'OldValue'
      );

      l_app_settings_rec.setting_name  := 'TEST_UPDATE';
      l_app_settings_rec.setting_value := 'NewValue';

      -- When
      tapi_app_settings.upd(l_app_settings_rec);

      -- Then
      select setting_value
        into l_value
        from app_settings
       where setting_name = 'TEST_UPDATE';

      ut.expect(l_value).to_equal('NewValue');
      delete from app_settings
       where setting_name = 'TEST_UPDATE';
   end test_upd_procedure;

   -- Test for the delete procedure
   procedure test_del_procedure is
      l_count PLS_INTEGER;
   begin
      -- Given
      insert into app_settings (
         setting_name,
         setting_value
      ) values (
         'TEST_DELETE',
         'TestValue'
      );

      -- When
      tapi_app_settings.del('TEST_DELETE');

      -- Then
      select count(*)
        into l_count
        from app_settings
       where setting_name = 'TEST_DELETE';

      ut.expect(l_count).to_equal(0);
   end test_del_procedure;

end tapi_app_settings_ut;
  
      ]]></n0:source>
    </n0:createOraclePackageBody>
 </changeSet>
</databaseChangeLog>       