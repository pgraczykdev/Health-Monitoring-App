<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
  xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:n0="http://www.oracle.com/xml/ns/dbchangelog-ext"
  xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog 
        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-latest.xsd"
>
  <changeSet id="1" author="pg">
    <n0:createOraclePackageBody
      objectName="hma_json"
      objectType="PACKAGE_BODY"
      ownerName="HMA"
      replaceIfExists="true"
    >
      <n0:source
        ><![CDATA[ 
create or replace package body hma_json is
   gc_scope_prefix constant hma_varchar2.vc50 := LOWER($$plsql_unit)
                                                 || '.';
   function get_varchar2 (
      p_json clob,
      p_path varchar2
   ) return varchar2 is
      l_params logger.tab_param;
      l_scope  logger_logs.scope%type := gc_scope_prefix || 'get_varchar2';
   begin
      logger.append_param(
                         l_params,
                         'p_json',
                         p_json
      );
      logger.append_param(
                         l_params,
                         'p_path',
                         p_path
      );
      logger.LOG(
                'START',
                l_scope,
                null,
                l_params
      );
      APEX_JSON.parse(p_json);
      logger.LOG(
                'END',
                l_scope,
                null,
                l_params
      );
      return APEX_JSON.get_varchar2(p_path);
   exception
      when others then
         logger.log_error(
                         'Unhandled Exception',
                         l_scope,
                         null,
                         l_params
         );
         raise;
   end;


   function get_number (
      p_json clob,
      p_path varchar2
   ) return number is
      l_params logger.tab_param;
      l_scope  logger_logs.scope%type := gc_scope_prefix || 'get_number';
   begin
      logger.append_param(
                         l_params,
                         'p_json',
                         p_json
      );
      logger.append_param(
                         l_params,
                         'p_path',
                         p_path
      );
      logger.LOG(
                'START',
                l_scope,
                null,
                l_params
      );
      APEX_JSON.parse(p_json);
      logger.LOG(
                'END',
                l_scope,
                null,
                l_params
      );
      return APEX_JSON.get_number(p_path);
   exception
      when others then
         logger.log_error(
                         'Unhandled Exception',
                         l_scope,
                         null,
                         l_params
         );
         raise;
   end;


   function get_date (
      p_json        clob,
      p_path        varchar2,
      p_date_format varchar2
   ) return date is
      l_params   logger.tab_param;
      l_scope    logger_logs.scope%type := gc_scope_prefix || 'get_date';
      l_date_str hma_varchar2.vc100;
   begin
      logger.append_param(
                         l_params,
                         'p_json',
                         p_json
      );
      logger.append_param(
                         l_params,
                         'p_path',
                         p_path
      );
      logger.LOG(
                'START',
                l_scope,
                null,
                l_params
      );
      APEX_JSON.parse(p_json);
      l_date_str := APEX_JSON.get_varchar2(p_path);
      logger.LOG(
                'END',
                l_scope,
                null,
                l_params
      );
      return TO_DATE(
                    l_date_str,
                    p_date_format
             );
   exception
      when others then
         logger.log_error(
                         'Unhandled Exception',
                         l_scope,
                         null,
                         l_params
         );
         raise;
   end;

   function get_clob (
      p_json clob,
      p_path varchar2
   ) return clob is
      l_params logger.tab_param;
      l_scope  logger_logs.scope%type := gc_scope_prefix || 'get_clob';
      l_result clob;
   begin
      logger.append_param(
                         l_params,
                         'p_json',
                         p_json
      );
      logger.append_param(
                         l_params,
                         'p_path',
                         p_path
      );
      logger.LOG(
                'START',
                l_scope,
                null,
                l_params
      );
      APEX_JSON.parse(p_json);
      l_result := APEX_JSON.get_clob(p_path);
      logger.LOG(
                'END',
                l_scope,
                null,
                l_params
      );
      return l_result;
   exception
      when others then
         logger.log_error(
                         'Unhandled Exception',
                         l_scope,
                         null,
                         l_params
         );
         raise;
   end;

end hma_json; ]]></n0:source
      >
    </n0:createOraclePackageBody>
  </changeSet>
</databaseChangeLog>
