<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog 
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog" 
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
        xmlns:n0="http://www.oracle.com/xml/ns/dbchangelog-ext" 
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog 
        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-latest.xsd">
 <changeSet id="1" author="pg">
        <n0:createOraclePackageBody
        objectName="hma_string_ut" 
        objectType="PACKAGE_BODY" 
        ownerName="HMA"  
        replaceIfExists="true"
        >
            <n0:source><![CDATA[
create or replace package body hma_string_ut is


   procedure test_split_simple is
      l_results hma_varchar2.hma_t_varchar2;
   begin
      -- Given && When
      l_results := hma_string.split(
                               'apple,banana,cherry',
                               ','
                   );

      -- Then
      ut.expect(l_results(1)).to_equal('apple');
      ut.expect(l_results(2)).to_equal('banana');
      ut.expect(l_results(3)).to_equal('cherry');
   end test_split_simple;


   procedure test_split_empty_string is
      l_results hma_varchar2.hma_t_varchar2;
   begin
      -- Given && When
      l_results := hma_string.split(
                               '',
                               ','
                   );

      -- Then
      ut.expect(l_results.COUNT).to_equal(0);
   end test_split_empty_string;


   procedure test_split_no_delimiter is
      l_results hma_varchar2.hma_t_varchar2;
   begin
      -- given && when
      l_results := hma_string.split(
                               'applebanana',
                               ','
                   );

      -- Then
      ut.expect(l_results.COUNT).to_equal(1);
      ut.expect(l_results(1)).to_equal('applebanana');
   end test_split_no_delimiter;

  
   procedure test_split_consecutive_delimiters is
      l_results hma_varchar2.hma_t_varchar2;
   begin
      -- Given && When
      l_results := hma_string.split(
                               'apple,,banana',
                               ','
                   );

      -- Then
      ut.expect(l_results.COUNT).to_equal(3);
      ut.expect(l_results(1)).to_equal('apple');
      ut.expect(l_results(2)).to_equal('');  -- Empty part between consecutive delimiters
      ut.expect(l_results(3)).to_equal('banana');
   end test_split_consecutive_delimiters;


   procedure test_join_simple is
      l_list   hma_varchar2.hma_t_varchar2 := hma_varchar2.hma_t_varchar2(
                                                         'apple',
                                                         'banana',
                                                         'cherry'
                                                      );
      l_result hma_varchar2.vc32767;
   begin
      -- Given && When
      l_result := hma_string.join(
                             l_list,
                             ', '
                  );

      -- Then
      ut.expect(l_result).to_equal('apple, banana, cherry');
   end test_join_simple;


   procedure test_join_empty_list is
      l_list   hma_varchar2.hma_t_varchar2;
      l_result hma_varchar2.vc32767;
   begin
      -- Given && When
      l_result := hma_string.join(
                             l_list,
                             ', '
                  );

      -- Then
      ut.expect(l_result).to_equal('');
   end test_join_empty_list;

   -- Test for the join function: single element
   procedure test_join_single_element is
      l_list   hma_varchar2.hma_t_varchar2 := hma_varchar2.hma_t_varchar2('apple');
      l_result hma_varchar2.vc32767;
   begin
      -- Given && When
      l_result := hma_string.join(
                             l_list,
                             ', '
                  );

      -- Then
      ut.expect(l_result).to_equal('apple');
   end test_join_single_element;

   -- Test for the join function: different delimiter
   procedure test_join_different_delimiter is
      l_list   hma_varchar2.hma_t_varchar2 := hma_varchar2.hma_t_varchar2(
                                                         'apple',
                                                         'banana',
                                                         'cherry'
                                                   );
      l_result hma_varchar2.vc32767;
   begin
      --Given && When
      l_result := hma_string.join(
                             l_list,
                             ' | '
                  );

      -- Then
      ut.expect(l_result).to_equal('apple | banana | cherry');
   end test_join_different_delimiter;

end hma_string_ut;


                       ]]></n0:source>
    </n0:createOraclePackageBody>
 </changeSet>
</databaseChangeLog> 